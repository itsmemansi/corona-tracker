{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid-19 Image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","i","App","state","fetchedData","setState","this","src","coronaImage","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,UAAY,2B,oBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,gOC6DpJC,EAzDD,SAAC,GAAwD,IAAD,IAArDC,KAAOC,EAA8C,EAA9CA,UAAUC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACjD,OAAIH,EAKA,qBAAKI,UAAaC,IAAOC,UAAzB,SACC,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAW,EAAGC,QAAQ,SAAtC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAM,GAAIC,GAAM,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAOY,UAArF,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACI,cAAC,IAAD,CACIC,MAAS,EACTC,IAAOxB,EAAUyB,MACjBC,SAAY,IACZC,UAAY,QAGpB,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAKzB,GAAY0B,iBAC1D,cAACV,EAAA,EAAD,CAAYG,QAAU,QAAtB,qDAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAM,GAAIC,GAAM,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAOJ,WAArF,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACA,cAAC,IAAD,CACEC,MAAS,EACTC,IAAOvB,EAAUwB,MACjBC,SAAY,IACZC,UAAY,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAKzB,GAAY0B,iBAC1D,cAACV,EAAA,EAAD,CAAYG,QAAU,QAAtB,qDAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAM,GAAIC,GAAM,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAOH,QAArF,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACA,cAAC,IAAD,CACEC,MAAS,EACTC,IAAOtB,EAAOuB,MACdC,SAAY,IACZC,UAAY,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAKzB,GAAY0B,iBAC1D,cAACV,EAAA,EAAD,CAAYG,QAAU,QAAtB,0DA/CN,c,yBCPTQ,EAAM,iCAICC,EAAS,uCAAG,WAAMC,GAAN,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAQiDG,IAAMC,IAAIF,GAR3D,2BAQTnC,KAAQC,EARC,EAQDA,UAAWC,EARV,EAQUA,UAAWC,EARrB,EAQqBA,OAAOC,EAR5B,EAQ4BA,WAR5B,kBAgBV,CAACH,YAAWC,YAAWC,SAAQC,eAhBrB,kCAmBjBkC,QAAQC,IAAR,MAnBiB,0DAAH,sDAsBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEDE,IAAMC,IA3Bd,wCAyBS,uBAEfrC,EAFe,EAEfA,KACDyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC1C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAEpBR,QAAQC,IAAIE,GARU,kBASfA,GATe,kCAatBH,QAAQC,IAAR,MAbsB,0DAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAEaE,IAAMC,IA1C5B,4CAwCS,uBAERW,EAFQ,EAEdhD,KAAMgD,UAFQ,kBAIfA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAJpB,gCAOtBX,QAAQC,IAAR,MAPsB,yDAAH,qD,0BCoBZW,EA3DD,SAAC,GAAsD,IAAD,IAApDlD,KAAQC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,OAAS8B,EAAa,EAAbA,QACnD,EAAkCkB,mBAAS,IAA3C,mBAAOR,EAAP,KAAkBS,EAAlB,KAEAC,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbkB,EADa,SACMZ,IADN,6EAAH,qDAGdc,KACF,IAGF,IAAMC,EACFZ,EAAUa,OAEF,cAAC,IAAD,CACIxD,KAAM,CACFyD,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CAAC,CACP1D,KAAM2C,EAAUD,KAAI,qBAAEzC,aACtB0D,MAAO,WACPC,YAAa,UACbC,MAAM,GAEV,CACI7D,KAAM2C,EAAUD,KAAI,qBAAEvC,UACtBwD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAGZ,KAGZE,EACJ9D,EACG,cAAC,IAAD,CACGD,KAAQ,CACJyD,OAAO,CAAC,WAAY,YAAa,UACjCC,SAAS,CAAC,CACRC,MAAO,SACPG,gBAAiB,CAAC,uBAAwB,uBAAwB,wBAClE9D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAGtDsC,QAAW,CACTC,OAAO,CAAEC,SAAQ,GACjBC,MAAM,CAAED,SAAQ,EAAOE,KAAK,oBAAD,OAAqBnC,OAEhD,KAIV,OACI,qBAAK5B,UAAaC,IAAOC,UAAzB,SACK0B,EAAU8B,EAAWR,K,oCCpCnBc,EAnBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBACpB,EAAgDnB,mBAAS,IAAzD,mBAAOoB,EAAP,KAAyBC,EAAzB,KAQA,OAPAnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACazB,IADb,6EAAH,qDAGdO,KACD,CAACkB,IAGD,cAACC,EAAA,EAAD,CAAapE,UAAaC,IAAOoE,YAAjC,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAY,SAACC,GAAD,OAAWR,EAAoBQ,EAAMC,OAAOrD,QAAtF,UACA,wBAAQA,MAAM,GAAd,oBAEF6C,EAAiB7B,KAAI,SAACT,EAAQ+C,GAAT,OAAe,wBAAgBtD,MAAOO,EAAvB,SAAiCA,GAApB+C,Y,iBClB3C,MAA0B,2CCyC1BC,E,4MA/BXC,MAAQ,CACJlF,KAAM,GACNiC,QAAS,I,EAQbqC,oB,uCAAsB,WAAMrC,GAAN,eAAAC,EAAA,sEAGQF,EAAUC,GAHlB,OAGZkD,EAHY,OAKlB,EAAKC,SAAS,CAACpF,KAAMmF,EAAalD,QAASA,IALzB,2C,oJALtB,4BAAAC,EAAA,sEAC8BF,IAD9B,OACUmD,EADV,OAEIE,KAAKD,SAAS,CAACpF,KAAMmF,IAFzB,gD,0EAcA,WACI,MAA0BE,KAAKH,MAAvBlF,EAAR,EAAQA,KAAOiC,EAAf,EAAeA,QACf,OACI,sBAAK5B,UAAaC,IAAOC,UAAzB,UACI,qBAAK+E,IAAOC,EAAalF,UAAaC,IAAOkF,MAAOC,IAAM,aAC1D,cAAC,EAAD,CAAOzF,KAAQA,IACf,cAAC,EAAD,CAAesE,oBAAwBe,KAAKf,sBAC5C,cAAC,EAAD,CAAOtE,KAAMA,EAAMiC,QAASA,W,GA3B1ByD,IAAMC,WCNxBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,U,mBCFhDlG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,sB","file":"static/js/main.1fd4d929.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__39L-a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2lqtX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__Qq7ud\",\"card\":\"Cards_card__3bljY\",\"infected\":\"Cards_infected__2E0jT\",\"recovered\":\"Cards_recovered__prTmV\",\"deaths\":\"Cards_deaths__1sJVw\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\"; // external module to apply multiple style classes..\r\nconst Cards = ({ data: {confirmed,recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed)\r\n    {\r\n        return \"Loading...\";\r\n    }\r\n    return (\r\n        <div className = {styles.container}>\r\n         <Grid container spacing = {3} justify=\"center\">\r\n             <Grid item component = {Card} xs = {12} md = {3} className = {cx(styles.card, styles.infected)}>\r\n                 <CardContent>\r\n                     <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\r\n                     <Typography variant = \"h5\">\r\n                         <CountUp\r\n                             start = {0}\r\n                             end = {confirmed.value}\r\n                             duration = {2.5} //2.5 seconds\r\n                             separator = \",\"\r\n                         />\r\n                     </Typography>\r\n                     <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                     <Typography variant = \"body2\">Number of active cases of COVID-19</Typography>\r\n                 </CardContent>\r\n             </Grid>\r\n             <Grid item component = {Card} xs = {12} md = {3} className = {cx(styles.card, styles.recovered)}>\r\n                 <CardContent>\r\n                     <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\r\n                     <Typography variant = \"h5\">                        \r\n                     <CountUp\r\n                       start = {0}\r\n                       end = {recovered.value}\r\n                       duration = {2.5} //2.5 seconds\r\n                       separator = \",\"\r\n                    />\r\n                    </Typography>\r\n                     <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                     <Typography variant = \"body2\">Number of recoveries from COVID-19</Typography>\r\n                 </CardContent>\r\n             </Grid>\r\n             <Grid item component = {Card} xs = {12} md = {3} className = {cx(styles.card, styles.deaths)}>\r\n                 <CardContent>\r\n                     <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\r\n                     <Typography variant = \"h5\">\r\n                     <CountUp\r\n                       start = {0}\r\n                       end = {deaths.value}\r\n                       duration = {2.5} //2.5 seconds\r\n                       separator = \",\"\r\n                     />\r\n                     </Typography>\r\n                     <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                     <Typography variant = \"body2\">Number of deaths cause by COVID-19</Typography>\r\n                 </CardContent>\r\n             </Grid>\r\n         </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;\r\n\r\n","import axios from \"axios\";\r\nconst url = \"https://covid19.mathdro.id/api\"; // url of api\r\nconst urlDailyDate = \"https://covid19.mathdro.id/api/daily\";\r\nconst urlCountries = \"https://covid19.mathdro.id/api/countries\"; \r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data : {confirmed, recovered, deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n        // const modifiedData = {\r\n        //     confirmed: data.confirmed,\r\n        //     recovered: data.recovered,\r\n        //     deaths: data.deaths,\r\n        //     lastUpdate: data.lastUpdate\r\n        // }\r\n        // return modifiedData;\r\n        return {confirmed, recovered, deaths, lastUpdate};\r\n    } \r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const {data} = await axios.get(urlDailyDate); \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        console.log(modifiedData);\r\n        return modifiedData;\r\n\r\n    } \r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const { data:{countries} } = await axios.get(urlCountries);\r\n        // console.log(response);\r\n        return countries.map((country) => country.name);\r\n    } \r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nconst Chart = ({data : {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        };\r\n        fetchAPI();\r\n    },[]);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n             (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date), \r\n                        datasets: [{\r\n                            data: dailyData.map(({confirmed }) => confirmed),\r\n                            label: \"Infected\",\r\n                            borderColor: \"#3333ff\",\r\n                            fill: true\r\n                        },\r\n                        {\r\n                            data: dailyData.map(({deaths }) => deaths),\r\n                            label: \"Deaths\",\r\n                            borderColor: \"red\",\r\n                            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                            fill: true\r\n                        }]\r\n                    }} \r\n                />) : null\r\n            );\r\n\r\n    const barChart = (\r\n      confirmed ? \r\n        (<Bar\r\n            data = {{\r\n                labels:['Infected', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                }]\r\n            }}\r\n            options = {{\r\n              legend:{ display:false} ,\r\n              title:{ display:true , text:`Current state in ${country}`}\r\n            }}\r\n        />) : null\r\n    );\r\n\r\n\r\n    return (\r\n        <div className = {styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\nexport default Chart;\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries());\r\n        };\r\n        fetchAPI();\r\n    }, [setFetchedCountries])\r\n    // console.log(fetchedCountries);\r\n    return (\r\n       <FormControl className = {styles.formControl}>\r\n           <NativeSelect defaultValue=\"\" onChange = {(event) => handleCountryChange(event.target.value)}>\r\n           <option value=\"\">Global</option>\r\n           {/* <option value=\"\">United States</option> */}\r\n        {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/covid-19 Image.9e5d4fc7.png\";","import React from \"react\";\r\n// import Cards from \"./components/Cards/Cards\";\r\n// import Chart from \"./components/Chart/Chart\";\r\n// import CountryPicker from \"./components/CountryPicker/CountryPicker\";\r\nimport {Cards, Chart, CountryPicker} from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport coronaImage from \"./images/covid-19 Image.png\";\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount () {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n        // console.log(country);\r\n        //fetch the data\r\n        const fetchedData = await fetchData(country);\r\n        // console.log(fetchedData);\r\n        this.setState({data: fetchedData, country: country});\r\n        //set the state\r\n    }\r\n\r\n    render(){\r\n        const { data , country} = this.state;\r\n        return(\r\n            <div className = {styles.container}>\r\n                <img src = {coronaImage} className = {styles.image} alt = \"COVID-19\"></img>\r\n                <Cards data = {data}/>\r\n                <CountryPicker handleCountryChange  = {this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2Xaet\",\"image\":\"App_image__30qrZ\"};"],"sourceRoot":""}